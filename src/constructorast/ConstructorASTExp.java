
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat May 29 17:42:17 CEST 2021
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.E;
import ast.IniBloque;
import ast.EIden;
import ast.ASExp;
import tipado.MiTipo;
import ast.Declaracion;
import ast.MasDimensiones;
import ast.Err;
import tipado.TPrimitivo;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat May 29 17:42:17 CEST 2021
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\046\005" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\005\005\000\002\044\005" +
    "\000\002\045\004\000\002\045\002\000\002\006\004\000" +
    "\002\006\004\000\002\006\002\000\002\006\003\000\002" +
    "\042\005\000\002\042\003\000\002\043\006\000\002\043" +
    "\005\000\002\021\004\000\002\022\006\000\002\022\003" +
    "\000\002\024\005\000\002\024\004\000\002\023\005\000" +
    "\002\023\004\000\002\017\005\000\002\017\004\000\002" +
    "\007\007\000\002\007\007\000\002\010\004\000\002\010" +
    "\002\000\002\011\010\000\002\011\006\000\002\012\011" +
    "\000\002\013\004\000\002\013\004\000\002\013\002\000" +
    "\002\020\004\000\002\025\005\000\002\026\004\000\002" +
    "\026\004\000\002\026\002\000\002\027\005\000\002\027" +
    "\004\000\002\027\002\000\002\014\011\000\002\014\007" +
    "\000\002\016\005\000\002\016\002\000\002\015\006\000" +
    "\002\015\002\000\002\030\005\000\002\030\005\000\002" +
    "\030\003\000\002\031\005\000\002\031\005\000\002\031" +
    "\003\000\002\032\005\000\002\032\003\000\002\033\005" +
    "\000\002\033\003\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\003\000\002\035\004\000\002\035" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\004\000\002\036\005\000" +
    "\002\036\006\000\002\047\002\000\002\047\003\000\002" +
    "\037\003\000\002\037\005\000\002\041\004\000\002\041" +
    "\002\000\002\040\005\000\002\040\002\000\002\052\003" +
    "\000\002\052\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\051\005\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\032\002\ufffd\003\024\004\032\022\030\025" +
    "\005\027\012\031\034\034\007\035\022\037\013\040\004" +
    "\060\011\001\002\000\006\003\272\060\274\001\002\000" +
    "\034\002\ufff1\003\ufff1\004\ufff1\020\ufff1\022\ufff1\025\ufff1" +
    "\027\ufff1\031\ufff1\034\ufff1\035\ufff1\037\ufff1\040\ufff1\060" +
    "\ufff1\001\002\000\004\002\271\001\002\000\012\006\157" +
    "\007\156\012\153\036\251\001\002\000\034\002\ufff2\003" +
    "\ufff2\004\ufff2\020\ufff2\022\ufff2\025\ufff2\027\ufff2\031\ufff2" +
    "\034\ufff2\035\ufff2\037\ufff2\040\ufff2\060\ufff2\001\002\000" +
    "\014\003\uffe2\013\124\015\uffe2\023\uffe2\025\uffe2\001\002" +
    "\000\006\003\237\013\240\001\002\000\022\003\234\010" +
    "\042\011\052\013\041\045\053\056\040\057\047\060\043" +
    "\001\002\000\034\002\ufff8\003\ufff8\004\ufff8\020\ufff8\022" +
    "\ufff8\025\ufff8\027\ufff8\031\ufff8\034\ufff8\035\ufff8\037\ufff8" +
    "\040\ufff8\060\ufff8\001\002\000\034\002\ufffd\003\024\004" +
    "\032\020\ufffd\022\030\025\005\027\012\031\034\034\007" +
    "\035\022\037\013\040\004\060\011\001\002\000\004\025" +
    "\232\001\002\000\034\002\ufff9\003\ufff9\004\ufff9\020\ufff9" +
    "\022\ufff9\025\ufff9\027\ufff9\031\ufff9\034\ufff9\035\ufff9\037" +
    "\ufff9\040\ufff9\060\ufff9\001\002\000\004\025\231\001\002" +
    "\000\004\025\230\001\002\000\022\003\225\010\042\011" +
    "\052\013\041\045\053\056\040\057\047\060\043\001\002" +
    "\000\034\002\ufffa\003\ufffa\004\ufffa\020\ufffa\022\ufffa\025" +
    "\ufffa\027\ufffa\031\ufffa\034\ufffa\035\ufffa\037\ufffa\040\ufffa" +
    "\060\ufffa\001\002\000\034\002\ufffd\003\024\004\032\020" +
    "\ufffd\022\030\025\005\027\012\031\034\034\007\035\022" +
    "\037\013\040\004\060\011\001\002\000\034\002\ufff5\003" +
    "\ufff5\004\ufff5\020\ufff5\022\ufff5\025\ufff5\027\ufff5\031\ufff5" +
    "\034\ufff5\035\ufff5\037\ufff5\040\ufff5\060\ufff5\001\002\000" +
    "\012\003\163\015\220\023\165\025\uffea\001\002\000\004" +
    "\002\001\001\002\000\022\003\206\010\042\011\052\013" +
    "\041\045\053\056\040\057\047\060\043\001\002\000\034" +
    "\002\ufff3\003\ufff3\004\ufff3\020\ufff3\022\ufff3\025\ufff3\027" +
    "\ufff3\031\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3\060\ufff3" +
    "\001\002\000\010\006\157\007\156\012\153\001\002\000" +
    "\034\002\ufff7\003\ufff7\004\ufff7\020\ufff7\022\ufff7\025\ufff7" +
    "\027\ufff7\031\ufff7\034\ufff7\035\ufff7\037\ufff7\040\ufff7\060" +
    "\ufff7\001\002\000\004\060\035\001\002\000\004\032\036" +
    "\001\002\000\022\010\042\011\052\013\041\015\044\045" +
    "\053\056\040\057\047\060\043\001\002\000\006\030\uffd2" +
    "\033\143\001\002\000\054\003\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\021\uffb0\024\uffb0\025\uffb0\030\uffb0\033\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\046\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\001\002\000\020" +
    "\010\042\011\052\013\041\045\053\056\040\057\047\060" +
    "\043\001\002\000\054\003\uffae\014\uffae\015\uffae\016\uffae" +
    "\021\uffae\024\uffae\025\uffae\030\uffae\033\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\uffae\055\uffae\001\002\000\056\003" +
    "\uffa9\013\124\014\uffa9\015\uffa9\016\uffa9\021\uffa9\024\uffa9" +
    "\025\uffa9\030\uffa9\033\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\001\002\000\024\010\042\011\052\013" +
    "\041\015\044\016\uffa4\045\053\056\040\057\047\060\043" +
    "\001\002\000\054\003\uffb1\014\uffb1\015\110\016\uffb1\021" +
    "\uffb1\024\uffb1\025\uffb1\030\uffb1\033\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052" +
    "\uffb1\053\uffb1\054\uffb1\055\uffb1\001\002\000\052\003\uffb3" +
    "\014\uffb3\016\uffb3\021\uffb3\024\uffb3\025\uffb3\030\uffb3\033" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\046\uffb3\047\uffb3" +
    "\050\101\051\100\052\075\053\074\054\076\055\077\001" +
    "\002\000\054\003\uffaf\014\uffaf\015\uffaf\016\uffaf\021\uffaf" +
    "\024\uffaf\025\uffaf\030\uffaf\033\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\001\002\000\036\003\uffba\014" +
    "\uffba\016\uffba\021\uffba\024\uffba\025\uffba\030\uffba\033\uffba" +
    "\041\uffba\042\uffba\043\uffba\044\uffba\046\uffba\047\uffba\001" +
    "\002\000\036\003\uffbc\014\uffbc\016\uffbc\021\uffbc\024\uffbc" +
    "\025\uffbc\030\uffbc\033\uffbc\041\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\046\067\047\uffbc\001\002\000\054\003\uffad\014\uffad" +
    "\015\uffad\016\uffad\021\uffad\024\uffad\025\uffad\030\uffad\033" +
    "\uffad\041\uffad\042\uffad\043\uffad\044\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\001" +
    "\002\000\020\010\042\011\052\013\041\045\053\056\040" +
    "\057\047\060\043\001\002\000\034\003\uffbe\014\uffbe\016" +
    "\uffbe\021\uffbe\024\uffbe\025\uffbe\030\uffbe\033\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\047\065\001\002\000\032\003" +
    "\uffc1\014\uffc1\016\uffc1\021\uffc1\024\uffc1\025\uffc1\030\uffc1" +
    "\033\uffc1\041\uffc1\042\uffc1\043\063\044\062\001\002\000" +
    "\024\003\uffa7\014\uffa7\016\uffa7\024\uffa7\025\uffa7\030\uffa7" +
    "\033\uffa7\041\057\042\060\001\002\000\020\010\042\011" +
    "\052\013\041\045\053\056\040\057\047\060\043\001\002" +
    "\000\020\010\042\011\052\013\041\045\053\056\040\057" +
    "\047\060\043\001\002\000\032\003\uffc2\014\uffc2\016\uffc2" +
    "\021\uffc2\024\uffc2\025\uffc2\030\uffc2\033\uffc2\041\uffc2\042" +
    "\uffc2\043\063\044\062\001\002\000\020\010\042\011\052" +
    "\013\041\045\053\056\040\057\047\060\043\001\002\000" +
    "\020\010\042\011\052\013\041\045\053\056\040\057\047" +
    "\060\043\001\002\000\034\003\uffc0\014\uffc0\016\uffc0\021" +
    "\uffc0\024\uffc0\025\uffc0\030\uffc0\033\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\047\065\001\002\000\020\010\042\011" +
    "\052\013\041\045\053\056\040\057\047\060\043\001\002" +
    "\000\036\003\uffbd\014\uffbd\016\uffbd\021\uffbd\024\uffbd\025" +
    "\uffbd\030\uffbd\033\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\046\067\047\uffbd\001\002\000\020\010\042\011\052\013" +
    "\041\045\053\056\040\057\047\060\043\001\002\000\036" +
    "\003\uffbb\014\uffbb\016\uffbb\021\uffbb\024\uffbb\025\uffbb\030" +
    "\uffbb\033\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\046\uffbb" +
    "\047\uffbb\001\002\000\034\003\uffbf\014\uffbf\016\uffbf\021" +
    "\uffbf\024\uffbf\025\uffbf\030\uffbf\033\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\047\065\001\002\000\032\003\uffc3\014" +
    "\uffc3\016\uffc3\021\uffc3\024\uffc3\025\uffc3\030\uffc3\033\uffc3" +
    "\041\uffc3\042\uffc3\043\063\044\062\001\002\000\052\003" +
    "\uffb2\014\uffb2\016\uffb2\021\uffb2\024\uffb2\025\uffb2\030\uffb2" +
    "\033\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\001\002\000\020\010\042\011\052\013\041\045\053\056" +
    "\040\057\047\060\043\001\002\000\020\010\042\011\052" +
    "\013\041\045\053\056\040\057\047\060\043\001\002\000" +
    "\020\010\042\011\052\013\041\045\053\056\040\057\047" +
    "\060\043\001\002\000\020\010\042\011\052\013\041\045" +
    "\053\056\040\057\047\060\043\001\002\000\020\010\042" +
    "\011\052\013\041\045\053\056\040\057\047\060\043\001" +
    "\002\000\020\010\042\011\052\013\041\045\053\056\040" +
    "\057\047\060\043\001\002\000\036\003\uffb7\014\uffb7\016" +
    "\uffb7\021\uffb7\024\uffb7\025\uffb7\030\uffb7\033\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\046\uffb7\047\uffb7\001\002\000" +
    "\036\003\uffb6\014\uffb6\016\uffb6\021\uffb6\024\uffb6\025\uffb6" +
    "\030\uffb6\033\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\046" +
    "\uffb6\047\uffb6\001\002\000\036\003\uffb8\014\uffb8\016\uffb8" +
    "\021\uffb8\024\uffb8\025\uffb8\030\uffb8\033\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\046\uffb8\047\uffb8\001\002\000\036" +
    "\003\uffb9\014\uffb9\016\uffb9\021\uffb9\024\uffb9\025\uffb9\030" +
    "\uffb9\033\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\046\uffb9" +
    "\047\uffb9\001\002\000\036\003\uffb5\014\uffb5\016\uffb5\021" +
    "\uffb5\024\uffb5\025\uffb5\030\uffb5\033\uffb5\041\uffb5\042\uffb5" +
    "\043\uffb5\044\uffb5\046\uffb5\047\uffb5\001\002\000\036\003" +
    "\uffb4\014\uffb4\016\uffb4\021\uffb4\024\uffb4\025\uffb4\030\uffb4" +
    "\033\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\046\uffb4\047" +
    "\uffb4\001\002\000\020\010\042\011\052\013\041\045\053" +
    "\056\040\057\047\060\043\001\002\000\010\016\112\041" +
    "\057\042\060\001\002\000\054\003\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\021\uffaa\024\uffaa\025\uffaa\030\uffaa\033\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\001\002\000" +
    "\004\016\121\001\002\000\006\016\uffa2\024\115\001\002" +
    "\000\022\010\042\011\052\013\041\015\044\045\053\056" +
    "\040\057\047\060\043\001\002\000\004\016\uffa5\001\002" +
    "\000\006\016\uffa2\024\115\001\002\000\004\016\uffa3\001" +
    "\002\000\020\003\uffa6\014\uffa6\016\uffa6\024\uffa6\025\uffa6" +
    "\030\uffa6\033\uffa6\001\002\000\054\003\uffac\014\uffac\015" +
    "\uffac\016\uffac\021\uffac\024\uffac\025\uffac\030\uffac\033\uffac" +
    "\041\uffac\042\uffac\043\uffac\044\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\001\002" +
    "\000\054\003\uffa8\014\uffa8\015\uffa8\016\uffa8\021\uffa8\024" +
    "\uffa8\025\uffa8\030\uffa8\033\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\054\uffa8\055\uffa8\001\002\000\026\003\126\010\042" +
    "\011\052\013\041\014\uffcd\015\044\045\053\056\040\057" +
    "\047\060\043\001\002\000\004\014\137\001\002\000\010" +
    "\003\131\014\uffca\024\130\001\002\000\010\003\131\014" +
    "\uffca\024\130\001\002\000\022\010\042\011\052\013\041" +
    "\015\044\045\053\056\040\057\047\060\043\001\002\000" +
    "\010\003\131\014\uffca\024\130\001\002\000\004\014\uffcf" +
    "\001\002\000\004\014\uffcb\001\002\000\010\003\131\014" +
    "\uffca\024\130\001\002\000\004\014\uffcc\001\002\000\004" +
    "\014\uffce\001\002\000\054\003\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\021\uffd0\024\uffd0\025\uffd0\030\uffd0\033\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\046\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\001\002\000\010" +
    "\014\141\041\057\042\060\001\002\000\054\003\uffab\014" +
    "\uffab\015\uffab\016\uffab\021\uffab\024\uffab\025\uffab\030\uffab" +
    "\033\uffab\041\uffab\042\uffab\043\uffab\044\uffab\046\uffab\047" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\001\002\000\004\030\146\001\002\000\022\003\144\010" +
    "\042\011\052\013\041\045\053\056\040\057\047\060\043" +
    "\001\002\000\004\030\uffd3\001\002\000\010\030\uffd4\041" +
    "\057\042\060\001\002\000\004\017\150\001\002\000\034" +
    "\002\uffd5\003\uffd5\004\uffd5\020\uffd5\022\uffd5\025\uffd5\027" +
    "\uffd5\031\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\060\uffd5" +
    "\001\002\000\032\003\024\004\032\020\ufffd\022\030\025" +
    "\005\027\012\031\034\034\007\035\022\037\013\040\004" +
    "\060\011\001\002\000\004\020\152\001\002\000\036\002" +
    "\ufffc\003\ufffc\004\ufffc\020\ufffc\022\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\031\ufffc\034\ufffc\035\ufffc\037\ufffc\040\ufffc\060" +
    "\ufffc\001\002\000\006\015\uff9e\060\uff9e\001\002\000\006" +
    "\015\uff9b\060\uff9b\001\002\000\006\015\161\060\162\001" +
    "\002\000\006\015\uff9d\060\uff9d\001\002\000\006\015\uff9f" +
    "\060\uff9f\001\002\000\004\025\ufff0\001\002\000\004\016" +
    "\205\001\002\000\012\003\163\023\165\024\uffea\025\uffea" +
    "\001\002\000\006\024\uffe9\025\uffe9\001\002\000\006\024" +
    "\202\025\uffed\001\002\000\026\003\170\005\166\010\042" +
    "\011\052\013\041\015\044\045\053\056\040\057\047\060" +
    "\043\001\002\000\010\006\157\007\156\012\153\001\002" +
    "\000\006\024\uffeb\025\uffeb\001\002\000\006\024\uffe7\025" +
    "\uffe7\001\002\000\006\024\uffec\025\uffec\001\002\000\004" +
    "\015\173\001\002\000\020\010\042\011\052\013\041\045" +
    "\053\056\040\057\047\060\043\001\002\000\010\015\175" +
    "\024\uffe8\025\uffe8\001\002\000\020\010\042\011\052\013" +
    "\041\045\053\056\040\057\047\060\043\001\002\000\010" +
    "\016\177\041\057\042\060\001\002\000\010\015\uffe6\024" +
    "\uffe6\025\uffe6\001\002\000\010\016\201\041\057\042\060" +
    "\001\002\000\010\015\uffe5\024\uffe5\025\uffe5\001\002\000" +
    "\004\060\162\001\002\000\004\025\uffef\001\002\000\004" +
    "\025\uffee\001\002\000\006\015\uff9c\060\uff9c\001\002\000" +
    "\004\021\215\001\002\000\010\021\210\041\057\042\060" +
    "\001\002\000\004\017\150\001\002\000\036\002\uffd8\003" +
    "\uffd8\004\uffd8\020\uffd8\022\uffd8\025\uffd8\026\212\027\uffd8" +
    "\031\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\060\uffd8\001" +
    "\002\000\004\017\150\001\002\000\034\002\uffdb\003\uffdb" +
    "\004\uffdb\020\uffdb\022\uffdb\025\uffdb\027\uffdb\031\uffdb\034" +
    "\uffdb\035\uffdb\037\uffdb\040\uffdb\060\uffdb\001\002\000\034" +
    "\002\uffd9\003\uffd9\004\uffd9\020\uffd9\022\uffd9\025\uffd9\027" +
    "\uffd9\031\uffd9\034\uffd9\035\uffd9\037\uffd9\040\uffd9\060\uffd9" +
    "\001\002\000\004\017\150\001\002\000\036\002\uffd8\003" +
    "\uffd8\004\uffd8\020\uffd8\022\uffd8\025\uffd8\026\212\027\uffd8" +
    "\031\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\060\uffd8\001" +
    "\002\000\034\002\uffda\003\uffda\004\uffda\020\uffda\022\uffda" +
    "\025\uffda\027\uffda\031\uffda\034\uffda\035\uffda\037\uffda\040" +
    "\uffda\060\uffda\001\002\000\020\010\042\011\052\013\041" +
    "\045\053\056\040\057\047\060\043\001\002\000\004\025" +
    "\uffe4\001\002\000\010\016\223\041\057\042\060\001\002" +
    "\000\012\003\uffe3\015\uffe3\023\uffe3\025\uffe3\001\002\000" +
    "\006\002\ufffe\020\ufffe\001\002\000\034\002\uffdc\003\uffdc" +
    "\004\uffdc\020\uffdc\022\uffdc\025\uffdc\027\uffdc\031\uffdc\034" +
    "\uffdc\035\uffdc\037\uffdc\040\uffdc\060\uffdc\001\002\000\010" +
    "\025\227\041\057\042\060\001\002\000\034\002\uffdd\003" +
    "\uffdd\004\uffdd\020\uffdd\022\uffdd\025\uffdd\027\uffdd\031\uffdd" +
    "\034\uffdd\035\uffdd\037\uffdd\040\uffdd\060\uffdd\001\002\000" +
    "\034\002\ufff6\003\ufff6\004\ufff6\020\ufff6\022\ufff6\025\ufff6" +
    "\027\ufff6\031\ufff6\034\ufff6\035\ufff6\037\ufff6\040\ufff6\060" +
    "\ufff6\001\002\000\034\002\ufff4\003\ufff4\004\ufff4\020\ufff4" +
    "\022\ufff4\025\ufff4\027\ufff4\031\ufff4\034\ufff4\035\ufff4\037" +
    "\ufff4\040\ufff4\060\ufff4\001\002\000\034\002\ufffb\003\ufffb" +
    "\004\ufffb\020\ufffb\022\ufffb\025\ufffb\027\ufffb\031\ufffb\034" +
    "\ufffb\035\ufffb\037\ufffb\040\ufffb\060\ufffb\001\002\000\006" +
    "\002\uffff\020\uffff\001\002\000\034\002\uffde\003\uffde\004" +
    "\uffde\020\uffde\022\uffde\025\uffde\027\uffde\031\uffde\034\uffde" +
    "\035\uffde\037\uffde\040\uffde\060\uffde\001\002\000\010\025" +
    "\236\041\057\042\060\001\002\000\034\002\uffdf\003\uffdf" +
    "\004\uffdf\020\uffdf\022\uffdf\025\uffdf\027\uffdf\031\uffdf\034" +
    "\uffdf\035\uffdf\037\uffdf\040\uffdf\060\uffdf\001\002\000\004" +
    "\030\245\001\002\000\020\010\042\011\052\013\041\045" +
    "\053\056\040\057\047\060\043\001\002\000\010\014\242" +
    "\041\057\042\060\001\002\000\004\030\243\001\002\000" +
    "\004\017\150\001\002\000\034\002\uffd7\003\uffd7\004\uffd7" +
    "\020\uffd7\022\uffd7\025\uffd7\027\uffd7\031\uffd7\034\uffd7\035" +
    "\uffd7\037\uffd7\040\uffd7\060\uffd7\001\002\000\004\017\150" +
    "\001\002\000\034\002\uffd6\003\uffd6\004\uffd6\020\uffd6\022" +
    "\uffd6\025\uffd6\027\uffd6\031\uffd6\034\uffd6\035\uffd6\037\uffd6" +
    "\040\uffd6\060\uffd6\001\002\000\004\025\uffd1\001\002\000" +
    "\006\015\161\060\uffa0\001\002\000\004\060\uffa1\001\002" +
    "\000\004\060\253\001\002\000\006\003\254\013\255\001" +
    "\002\000\004\017\150\001\002\000\012\006\157\007\156" +
    "\012\153\014\uffc6\001\002\000\006\015\161\060\262\001" +
    "\002\000\004\014\260\001\002\000\004\017\150\001\002" +
    "\000\034\002\uffc9\003\uffc9\004\uffc9\020\uffc9\022\uffc9\025" +
    "\uffc9\027\uffc9\031\uffc9\034\uffc9\035\uffc9\037\uffc9\040\uffc9" +
    "\060\uffc9\001\002\000\006\014\uffc4\024\263\001\002\000" +
    "\010\006\157\007\156\012\153\001\002\000\004\014\uffc7" +
    "\001\002\000\006\015\161\060\266\001\002\000\006\014" +
    "\uffc4\024\263\001\002\000\004\014\uffc5\001\002\000\034" +
    "\002\uffc8\003\uffc8\004\uffc8\020\uffc8\022\uffc8\025\uffc8\027" +
    "\uffc8\031\uffc8\034\uffc8\035\uffc8\037\uffc8\040\uffc8\060\uffc8" +
    "\001\002\000\004\002\000\001\002\000\034\002\uffe0\003" +
    "\uffe0\004\uffe0\020\uffe0\022\uffe0\025\uffe0\027\uffe0\031\uffe0" +
    "\034\uffe0\035\uffe0\037\uffe0\040\uffe0\060\uffe0\001\002\000" +
    "\006\015\220\025\275\001\002\000\006\015\uffe2\025\uffe2" +
    "\001\002\000\034\002\uffe1\003\uffe1\004\uffe1\020\uffe1\022" +
    "\uffe1\025\uffe1\027\uffe1\031\uffe1\034\uffe1\035\uffe1\037\uffe1" +
    "\040\uffe1\060\uffe1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\036\002\005\003\026\004\014\005\015\007" +
    "\016\011\013\012\032\014\024\017\022\020\020\021\017" +
    "\022\025\023\030\024\007\001\001\000\004\022\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\050\153" +
    "\051\247\052\251\001\001\000\002\001\001\000\004\025" +
    "\246\001\001\000\002\001\001\000\020\030\234\031\054" +
    "\032\053\033\050\034\047\035\045\036\044\001\001\000" +
    "\002\001\001\000\034\003\232\004\014\005\015\007\016" +
    "\011\013\012\032\014\024\017\022\020\020\021\017\022" +
    "\025\023\030\024\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\030" +
    "\225\031\054\032\053\033\050\034\047\035\045\036\044" +
    "\001\001\000\002\001\001\000\034\003\223\004\014\005" +
    "\015\007\016\011\013\012\032\014\024\017\022\020\020" +
    "\021\017\022\025\023\030\024\007\001\001\000\002\001" +
    "\001\000\004\006\220\001\001\000\002\001\001\000\020" +
    "\030\206\031\054\032\053\033\050\034\047\035\045\036" +
    "\044\001\001\000\002\001\001\000\006\050\153\051\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\030\055\031\054\032\053\033\050\034\047" +
    "\035\045\036\044\037\036\001\001\000\004\013\141\001" +
    "\001\000\002\001\001\000\020\030\137\031\054\032\053" +
    "\033\050\034\047\035\045\036\044\001\001\000\002\001" +
    "\001\000\006\025\122\047\121\001\001\000\024\030\055" +
    "\031\054\032\053\033\050\034\047\035\045\036\044\037" +
    "\113\041\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\072\036\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\031" +
    "\071\032\053\033\050\034\047\035\045\036\044\001\001" +
    "\000\016\031\060\032\053\033\050\034\047\035\045\036" +
    "\044\001\001\000\002\001\001\000\014\032\070\033\050" +
    "\034\047\035\045\036\044\001\001\000\014\032\063\033" +
    "\050\034\047\035\045\036\044\001\001\000\002\001\001" +
    "\000\012\033\065\034\047\035\045\036\044\001\001\000" +
    "\002\001\001\000\010\034\067\035\045\036\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\035\106\036\044\001\001\000\006" +
    "\035\105\036\044\001\001\000\006\035\104\036\044\001" +
    "\001\000\006\035\103\036\044\001\001\000\006\035\102" +
    "\036\044\001\001\000\006\035\101\036\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\030" +
    "\110\031\054\032\053\033\050\034\047\035\045\036\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\115\001\001\000\022\030\055\031\054" +
    "\032\053\033\050\034\047\035\045\036\044\037\116\001" +
    "\001\000\002\001\001\000\004\040\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\026\124\030\055\031\054\032\053\033\050" +
    "\034\047\035\045\036\044\037\126\001\001\000\002\001" +
    "\001\000\004\027\135\001\001\000\004\027\131\001\001" +
    "\000\022\030\055\031\054\032\053\033\050\034\047\035" +
    "\045\036\044\037\133\001\001\000\004\027\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\030\144\031\054\032\053\033\050\034\047\035\045" +
    "\036\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\146\001\001\000\002\001\001\000\034\003\150" +
    "\004\014\005\015\007\016\011\013\012\032\014\024\017" +
    "\022\020\020\021\017\022\025\023\030\024\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\163\001\001\000\002\001\001\000\004\045\202" +
    "\001\001\000\024\030\055\031\054\032\053\033\050\034" +
    "\047\035\045\036\044\037\170\042\166\001\001\000\004" +
    "\050\171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\043\173\001\001\000\020\030\177" +
    "\031\054\032\053\033\050\034\047\035\045\036\044\001" +
    "\001\000\002\001\001\000\020\030\175\031\054\032\053" +
    "\033\050\034\047\035\045\036\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\210\001\001\000\004\010\212\001\001\000" +
    "\004\046\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\215\001\001\000\004\010\216\001\001\000" +
    "\002\001\001\000\020\030\221\031\054\032\053\033\050" +
    "\034\047\035\045\036\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\030\240\031\054\032\053\033\050" +
    "\034\047\035\045\036\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\243\001\001\000\002\001\001" +
    "\000\004\046\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\267\001\001\000\010\016" +
    "\256\050\153\051\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\260\001\001\000\002\001\001\000" +
    "\004\015\263\001\001\000\006\050\153\051\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {


   private ASExp as = new ASExp();

  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Bloque 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.iniBloque(a); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		E start_val = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Bloque ::= Instruccion Bloque 
            {
              E RESULT =null;
		E i = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.bloque(i,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bloque",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Bloque ::= error Bloque 
            {
              E RESULT =null;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.bloque(new Err(),b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bloque",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Bloque ::= 
            {
              E RESULT =null;
		 RESULT=as.finBloque(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Bloque",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BloqueEntreLlaves ::= LAP Bloque LCIERRE 
            {
              IniBloque RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT =as.iniBloque(a); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BloqueEntreLlaves",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruccion ::= InsDeclaraciones PUNTO 
            {
              E RESULT =null;
		E i = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT=i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instruccion ::= InsTornar 
            {
              E RESULT =null;
		E i = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruccion ::= InsCondicional 
            {
              E RESULT =null;
		E i = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruccion ::= InsMentre 
            {
              E RESULT =null;
		E i = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruccion ::= InsPer 
            {
              E RESULT =null;
		E i = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Instruccion ::= InsLlamadaFuncio PUNTO 
            {
              E RESULT =null;
		E i = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT =i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Instruccion ::= InsFuncio 
            {
              E RESULT =null;
		E i = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Instruccion ::= InsAsig PUNTO 
            {
              E RESULT =null;
		E i = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT =i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Instruccion ::= InsEscriu 
            {
              E RESULT =null;
		E i = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Instruccion ::= InsLlegeix 
            {
              E RESULT =null;
		E i = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=i; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Instruccion ::= PUNTO 
            {
              E RESULT =null;
		 RESULT = new Err(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Instruccion",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // InsDeclaraciones ::= VAR Tipo Declarar 
            {
              E RESULT =null;
		MiTipo tipo = (MiTipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Declaracion decl = (Declaracion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.var(tipo,decl); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsDeclaraciones",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Declarar ::= IDEN Asignacion SigDeclaracion 
            {
              Declaracion RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E asig = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Declaracion siguiente = (Declaracion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.declaracion(id.lexema,asig,siguiente); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Declarar",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SigDeclaracion ::= COMA Declarar 
            {
              Declaracion RESULT =null;
		Declaracion decl = (Declaracion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=decl; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SigDeclaracion",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SigDeclaracion ::= 
            {
              Declaracion RESULT =null;
		 RESULT=as.finDec(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("SigDeclaracion",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Asignacion ::= ASIG Dato 
            {
              E RESULT =null;
		E expr = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=expr; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asignacion",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Asignacion ::= ASIG LoDelNou 
            {
              E RESULT =null;
		E nou = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = nou; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asignacion",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Asignacion ::= 
            {
              E RESULT =null;
		 RESULT=as.porDefecto(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asignacion",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Asignacion ::= error 
            {
              E RESULT =null;
		 RESULT = new Err(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Asignacion",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LoDelNou ::= NOU TipoPrimitivo MASDimensiones 
            {
              E RESULT =null;
		TPrimitivo tp = (TPrimitivo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		MasDimensiones m = (MasDimensiones)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.nou(tp,m); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LoDelNou",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LoDelNou ::= error 
            {
              E RESULT =null;
		 RESULT = new Err(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LoDelNou",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MASDimensiones ::= MASDimensiones CAP E0 CCIERRE 
            {
              MasDimensiones RESULT =null;
		MasDimensiones m = (MasDimensiones)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.masDimensiones(e,m); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("MASDimensiones",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MASDimensiones ::= CAP E0 CCIERRE 
            {
              MasDimensiones RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.masDimensiones(e,null);
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("MASDimensiones",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // InsAsig ::= Variable Asignacion 
            {
              E RESULT =null;
		E v = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E asig = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=as.valor(v,asig); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsAsig",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Variable ::= Variable CAP E0 CCIERRE 
            {
              E RESULT =null;
		E v = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.accesoArray(v,e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Variable",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Variable ::= IDEN 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EIden e = as.iden(); e.setIden(id.lexema); RESULT = e; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Variable",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // InsLlegeix ::= LLEGEIX Variable PUNTO 
            {
              E RESULT =null;
		E v = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.lee(v); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsLlegeix",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // InsLlegeix ::= LLEGEIX error 
            {
              E RESULT =null;
		 RESULT = as.lee(new Err()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsLlegeix",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // InsEscriu ::= ESCRIU E0 PUNTO 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.escribe(e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsEscriu",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // InsEscriu ::= ESCRIU error 
            {
              E RESULT =null;
		 RESULT = as.escribe(new Err()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsEscriu",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // InsTornar ::= TORNAR E0 PUNTO 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT =as.tornar(a); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsTornar",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // InsTornar ::= TORNAR error 
            {
              E RESULT =null;
		 RESULT =as.tornar(new Err()); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsTornar",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // InsCondicional ::= IAP E0 ICIERRE BloqueEntreLlaves Else 
            {
              E RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		IniBloque blo = (IniBloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E els = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.si(cond,blo,els); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsCondicional",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // InsCondicional ::= IAP error ICIERRE BloqueEntreLlaves Else 
            {
              E RESULT =null;
		IniBloque blo = (IniBloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E els = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.si(new Err(),blo,els); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsCondicional",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Else ::= ELSE BloqueEntreLlaves 
            {
              E RESULT =null;
		IniBloque a = (IniBloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as._else(a); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Else",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Else ::= 
            {
              E RESULT =null;
		 RESULT =as.blanco(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Else",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // InsMentre ::= MENTRE PAP E0 PCIERRE FER BloqueEntreLlaves 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		IniBloque b = (IniBloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.mientras(a,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsMentre",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // InsMentre ::= MENTRE error FER BloqueEntreLlaves 
            {
              E RESULT =null;
		IniBloque b = (IniBloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.mientras(new Err(),b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsMentre",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // InsPer ::= PER IDEN EN Dato OpcionAmb FER BloqueEntreLlaves 
            {
              E RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E c = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		IniBloque d = (IniBloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.per(a.lexema,b,c,d); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsPer",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OpcionAmb ::= AMB E0 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = a; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OpcionAmb",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OpcionAmb ::= AMB error 
            {
              E RESULT =null;
		 RESULT = new Err(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OpcionAmb",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OpcionAmb ::= 
            {
              E RESULT =null;
		 RESULT =as.blanco(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OpcionAmb",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // InsLlamadaFuncio ::= IDEN LlamadaFuncion 
            {
              E RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E p = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 EIden e = as.llamada(p); e.setIden(i.lexema); RESULT = e; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsLlamadaFuncio",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LlamadaFuncion ::= PAP LeftPasoDeParametros PCIERRE 
            {
              E RESULT =null;
		E p = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT =p; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LlamadaFuncion",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LeftPasoDeParametros ::= Dato PasoDeParametros 
            {
              E RESULT =null;
		E d = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E p = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.iniParametro(d,p); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LeftPasoDeParametros",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LeftPasoDeParametros ::= error PasoDeParametros 
            {
              E RESULT =null;
		E p = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.iniParametro(new Err(),p); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LeftPasoDeParametros",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LeftPasoDeParametros ::= 
            {
              E RESULT =null;
		 RESULT =as.blanco(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LeftPasoDeParametros",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PasoDeParametros ::= COMA Dato PasoDeParametros 
            {
              E RESULT =null;
		E d = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E p = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.parametro(d,p); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("PasoDeParametros",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PasoDeParametros ::= error PasoDeParametros 
            {
              E RESULT =null;
		E p = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.parametro(new Err(),p); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("PasoDeParametros",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PasoDeParametros ::= 
            {
              E RESULT =null;
		 RESULT =as.blanco(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("PasoDeParametros",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // InsFuncio ::= FUNCIO TipoFun IDEN PAP LeftArgumentos PCIERRE BloqueEntreLlaves 
            {
              E RESULT =null;
		MiTipo t = (MiTipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		E p = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		IniBloque b = (IniBloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.funcio(t,i.lexema,p,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFuncio",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // InsFuncio ::= FUNCIO TipoFun IDEN error BloqueEntreLlaves 
            {
              E RESULT =null;
		MiTipo t = (MiTipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		IniBloque b = (IniBloque)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.funcio(t,i.lexema,new Err(),b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("InsFuncio",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LeftArgumentos ::= Tipo IDEN Argumentos 
            {
              E RESULT =null;
		MiTipo t = (MiTipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E p = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.iniArgumentos(t,i.lexema,p); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LeftArgumentos",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LeftArgumentos ::= 
            {
              E RESULT =null;
		 RESULT =as.blanco(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LeftArgumentos",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Argumentos ::= COMA Tipo IDEN Argumentos 
            {
              E RESULT =null;
		MiTipo t = (MiTipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E p = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.argumentos(t,i.lexema,p); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Argumentos",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Argumentos ::= 
            {
              E RESULT =null;
		 RESULT =as.blanco(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Argumentos",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E0 ::= E0 MAS E1 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.suma(a,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E0",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E0 ::= E0 MENOS E1 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.menos(a,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E0",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E0 ::= E1 
            {
              E RESULT =null;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =b ; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E0",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E1 ::= E1 POR E2 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.mul(a,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E1",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E1 ::= E1 DIV E2 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.div(a,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E1",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E1 ::= E2 
            {
              E RESULT =null;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =b ; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E1",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E2 ::= E2 OR E3 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.or(a,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E2 ::= E3 
            {
              E RESULT =null;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =b ; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E3 ::= E3 AND E4 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.and(a,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E3 ::= E4 
            {
              E RESULT =null;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =b ; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E4 ::= E5 IGUAL E5 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.igual(a,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E4 ::= E5 DISTINTO E5 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.dist(a,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E4 ::= E5 MAYOR E5 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.may(a,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E4 ::= E5 MENOR E5 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.men(a,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E4 ::= E5 MAYORIGUAL E5 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.mayig(a,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E4 ::= E5 MENORIGUAL E5 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.menig(a,b); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E4 ::= E5 
            {
              E RESULT =null;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =b ; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E5 ::= NOT E5 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.neg(a); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E5 ::= E6 
            {
              E RESULT =null;
		E b = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =b; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E6 ::= ENT 
            {
              E RESULT =null;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.ent(a.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E6 ::= REAL 
            {
              E RESULT =null;
		TokenValue b = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT =as.real(b.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E6 ::= CERT 
            {
              E RESULT =null;
		 RESULT =as.bool(true); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E6 ::= FALS 
            {
              E RESULT =null;
		 RESULT =as.bool(false); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E6 ::= IDEN Opciones 
            {
              E RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		EIden o = (EIden)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 o.setIden(id.lexema); RESULT =o; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E6 ::= PAP E0 PCIERRE 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT =e ; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E6 ::= E6 CAP E0 CCIERRE 
            {
              E RESULT =null;
		E a = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = as.accesoArray(a,e); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Opciones ::= 
            {
              EIden RESULT =null;
		 RESULT = as.iden(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Opciones",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Opciones ::= LlamadaFuncion 
            {
              EIden RESULT =null;
		E p = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.llamada(p); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Opciones",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Dato ::= E0 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=e; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dato",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Dato ::= CAP LeftLista CCIERRE 
            {
              E RESULT =null;
		E list = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = list; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Dato",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LeftLista ::= Dato Lista 
            {
              E RESULT =null;
		E d = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E l = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.lista(d,l); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LeftLista",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LeftLista ::= 
            {
              E RESULT =null;
		 RESULT = as.blanco(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LeftLista",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Lista ::= COMA Dato Lista 
            {
              E RESULT =null;
		E d = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		E l = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = as.lista(d,l); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Lista ::= 
            {
              E RESULT =null;
		 RESULT = as.blanco(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Lista",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TipoFun ::= BUIT 
            {
              MiTipo RESULT =null;
		 RESULT=new MiTipo(TPrimitivo.BUIT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoFun",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TipoFun ::= Tipo 
            {
              MiTipo RESULT =null;
		MiTipo t = (MiTipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT=t; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoFun",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TipoPrimitivo ::= ENTER 
            {
              TPrimitivo RESULT =null;
		 RESULT=TPrimitivo.INT; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoPrimitivo",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TipoPrimitivo ::= IDREAL 
            {
              TPrimitivo RESULT =null;
		 RESULT=TPrimitivo.REAL; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoPrimitivo",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TipoPrimitivo ::= BOOL 
            {
              TPrimitivo RESULT =null;
		 RESULT=TPrimitivo.BOOL; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TipoPrimitivo",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Tipo ::= Tipo CAP CCIERRE 
            {
              MiTipo RESULT =null;
		MiTipo t = (MiTipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		 t.makeList(); RESULT=t; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Tipo ::= TipoPrimitivo 
            {
              MiTipo RESULT =null;
		TPrimitivo tp = (TPrimitivo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new MiTipo(tp); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("Tipo",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

